% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sprint_recover_motion_data.R
\name{sprint_recover_motion}
\alias{sprint_recover_motion}
\title{Sprint Recover Motion Data}
\usage{
sprint_recover_motion(
  power_series,
  dt = 0.01,
  cost_running_flat = 3.6,
  slope_equation = "original"
)
}
\arguments{
\item{power_series}{a vector of power values (W/kg) corresponding to instantaneous power output during a sprint.}

\item{dt}{a numeric value representing the time step at which power is provided (in seconds). Default is 0.01 seconds.}

\item{cost_running_flat}{a numeric value representing the cost of running on a flat surface (default is 3.6 J/kg/m, as suggested in Minetti et al. 2002)}

\item{slope_equation}{a string indicating the slope equation to use, either "original" or "extended". The "original" equation is based on the equation relating running at constant speed on different slopes porposed by Minetti et al. (2002), while the "extended" equation is based on similar equation for extended slopes proposed by Minetti and Pavei (2018).}
}
\value{
A tibble containing time, distance, velocity, acceleration, and power.
}
\description{
From a power time series, the function invert di Prampero et al.'s (2005, 2018) equivalent slope approach to recover acceleration, velocity and distace.
}
\examples{

# Extract Bolt's 100 m data from Graubner and Nixdorf data set.
bolt_100m <- graubner_nixdorf_sprints |>
  dplyr::filter(
    athlete == "Bolt",
    event == "Men's 100 m"
  )

# Compute sprint motion data

bolt_100m_motion_data <- sprint_motion_model_data(
  mean_velocity_splits = bolt_100m$velocity,
  time_splits = bolt_100m$splits,
  distance = bolt_100m$distance,
  reaction_time = bolt_100m$reaction_time[1],
  maximal_velocity = bolt_100m$maximal_velocity[1]
)


# Recover motion data from sprint power series

recovered_motion_data <- sprint_recover_motion(bolt_100m_motion_data$power, dt = 0.01)
head(recovered_motion_data)

}
